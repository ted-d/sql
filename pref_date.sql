/*
CLICKHOUSE bd
В нашем распоряжении таблица с логинами пользователей в наше приложение, мы снимаем лог каждые 5 минут если пользователь был в сети. Получается таблица примерно такого вида

+------+----------------------------+
| user |           login            |
+------+----------------------------+
|    1 | 2020-10-12 20:05:00.000000 |
|    1 | 2020-10-12 20:10:00.000000 |
|    1 | 2020-10-12 20:15:00.000000 |
|    1 | 2020-10-12 20:20:00.000000 |
|------+----------------------------|

Если разница между двумя заходами больше 5 минут, то значит пользователь начал новую сессию. Ваша задача разметить все сессии для каждого пользователя, то есть каждой сессии назначить номер от 1 до N Каждая новая сессия нового пользователя должна начинаться с 1 

Создание таблицы:

CREATE TABLE login_step
(
    id String,
    date DateTime
) ENGINE = Log;

Наполнение данными 

​INSERT INTO login_step(*) VALUES ('1', '2020-10-12 20:05:00'),
	('1', '2020-10-12 20:10:00'),
	('1', '2020-10-12 20:15:00'),
	('1', '2020-10-12 20:20:00'),
	('1', '2020-10-12 20:25:00'),
	('1', '2020-10-12 10:05:00'),
	('1', '2020-10-12 20:40:00'),
	('1', '2020-10-12 20:30:00'),
	('1', '2020-10-12 10:20:00'),
	('1', '2020-10-12 10:10:00'),
	('2', '2020-10-12 20:10:00'),
	('2', '2020-10-12 20:15:00'),
	('2', '2020-10-12 20:20:00'),
	('2', '2020-10-12 20:25:00'),
	('2', '2020-10-12 10:05:00'),
	('2', '2020-10-12 20:40:00'),
	('2', '2020-10-12 20:30:00'),
	('2', '2020-10-12 10:20:00'),
	('2', '2020-10-12 10:10:00');
​
​

Формат ответа:

В качестве ответа указать сумму по столбцу с размеченными сессиями.

Пример корректного вывода (это пример вывода, не ориентируйтесь на сами данные):

+------+----------------------------+-----+----------+
| user |           login            | ind | sessions |
+------+----------------------------+-----+----------+
|    1 | 2020-10-12 10:05:00.000000 |   1 |        1 |
|    1 | 2020-10-12 10:10:00.000000 |   0 |        1 |
|    1 | 2020-10-12 20:05:00.000000 |   1 |        2 |
|    1 | 2020-10-12 20:10:00.000000 |   0 |        2 |
|    1 | 2020-10-12 20:15:00.000000 |   0 |        2 |
|    2 | 2020-10-12 10:05:00.000000 |   1 |        1 |
|    2 | 2020-10-12 10:10:00.000000 |   0 |        1 |
|    2 | 2020-10-12 10:15:00.000000 |   0 |        1 |
|    2 | 2020-10-12 10:20:00.000000 |   0 |        1 |
+------+----------------------------+-----+----------+

*/
with t1 as (select id,date,neighbor(date,-1) as pred ,if(abs(date_sub(date,pred))/60>5, 1, 0) as ses,sum(ses) over(PARTITION BY id ORDER BY date )sumses from 
(select id,date from login_step order by id, date)
)
select sum(sumses) from t1;
